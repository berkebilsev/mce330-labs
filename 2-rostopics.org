#+TITLE:  MCE 330 Lab 2 - ROS Topics, Publishers & Subscribers
#+DESCRIPTION: This tutorial introduces the basics of ROS topics
#+VERSION: ROS-noetic 

* Communication Between ROS Nodes
In the previous tutorial, we have already created 2 different nodes. However, they are quite useless as they are at the moment. We want them to be able to communicate with each other so that we  can create complex systems. In ROS, this communication is done through 3 different means: topics, services and actions.

* Topics
A nice way to conceptualize topics is to think them as stacks of messages.
- Each topic has a name, i.e. "/cmd_vel". You can imagine this name as an empty box
- This box can be filled with "messages". A topic accepts messages of a specific type i.e. Int32, String, etc.
- Messages are stacked in the topic. That is, the latest one is at the top.
- Nodes can send more messages to the box, or take them away to read them.
  - A node that sends a new message to the topic is called a *publisher*.
  - A node that reads a message from the topic is called a *subscriber*.

[[./images/topics.png]]

*REMARK:* This is only a way to conceptualize the topics, but not the actual way in which they are implemented.
This description sounds as if the topics are out there at some central location and the nodes are reading / writing to them.
In the actual implementation, ROS handles this communication peer-to-peer only between the publishers & subscribers of a topic.
Otherwise, it would be quite inefficent. 

* TASK 1: Create a publisher
This week, we will only work using Python for simplicity sake. Let's have a Python script that publishes to a topic called "/command".

#+BEGIN_SRC bash
cd ~/catkin_ws/src #navigate to the catkin workspace/src
catkin_create_pkg lab2_example rospy #create a new package called lab2_example
cd lab2_example # get into that package
mkdir scripts # create a scripts directory, we often put python scripts not in "/src", but in "/scripts"
cd scripts # get into the newly creates scripts directory
touch publisher.py # create a python script called publisher.py
chmod +x publisher.py # give it the executable permission, so that we can execute it
code publisher.py # open up the file in your text editor
#+END_SRC

Here is the code that we will use. We will go over everything in this file line by line.
#+BEGIN_SRC python
#!/usr/bin/env python3
import rospy
from std_msgs.msg import Int32

rospy.init_node("publisher_node", anonymous=True)
pub = rospy.Publisher("name_of_the_topic", Int32, queue_size=10)

rate = rospy.Rate(10)
count = Int32()
count.data = 0

while not rospy.is_shutdown(): 
    pub.publish(count)
    count.data = count.data + 1
    rate.sleep()
#+END_SRC

*Once you write this, please listen to your instructor as he explains the code line by line.*
This is quite important because you will be asked to create your own publisher / subscriber from scratch at the end of the lab.
It may be smart to take some notes.

Now, let's run this node !
- Run roscore in some other terminal
- Start the publisher.py using rosrun
 
#+BEGIN_SRC bash
rosrun lab2_example publisher.py
#+END_SRC

*Hint:* If rosrun cannot find your package, you can profile your package and source your workspace again. Often times, just sourcing the setup.bash file solves the problem.
#+BEGIN_SRC bash
rospack profile
source ~/catkin_ws/devel/setup.bash
#+END_SRC

What happens when you run it ? You will see nothing. Your node is actually running, do not stop it.
Open up a new terminal tab, and run the following command.

#+BEGIN_SRC bash
rostopic list
#+END_SRC

You will see the following topics:
- /rosout and /rossout_agg : these are topics used internally by ROS. We didn't create them. They are just there.
- /name_of_the_topic: this is our topic !

We can see what is being published into this topic as follows:
#+BEGIN_SRC bash
rostopic echo /name_of_the_topic
#+END_SRC

Stop the echo command and the node using CTRL-C. You can keep the roscore running.

* TASK 2: Create a subscriber
Now, we can create a subscriber. Navigate to your scripts folder and create a new python file

#+BEGIN_SRC bash
cd ~/catkin_ws/src/lab2_example/scripts
touch subscriber.py
chmod +x subscriber.py
code subscriber.py
#+END_SRC

Here is the code for the subscriber.
#+BEGIN_SRC python
#!/usr/bin/env python3
import rospy
from std_msgs.msg import Int32

def callback(message):
    rospy.loginfo("Count is = %i", message.data)

# ---------------------------------------------------
rospy.init_node("subscriber_node", anonymous=True)
rospy.Subscriber("name_of_the_topic", Int32, callback)
rospy.spin()

#+END_SRC

Now, you will need 3 terminal tabs to run the following
1. roscore: this should already be running if you didn't close it in the previous example
2. publisher: start the publisher using rosrun, ie. "rosrun lab2_example publisher.py"
3. subscriber: start the subscriber using rosrun, ie. "rosrun lab2_example subscriber.py"

* TASK (50 points): Creating a publisher yourself
Let's say you have a robot and you are computing its desired velocity in a node. You want to publish this information to a topic so that the other nodes can read it.
- Create a package called "robot_controller"
- Create a script called "rc_vel_publisher.py" under ~/catkin_ws/src/robot_controller/scripts
  *Reminder:* Do not forget to make the script executable !
- In this script, implement the following publisher:
  - Name of the node is "robot_controller_vel_publisher" (use this in ros.init)
  - Publishes to a topic called "/cmd_vel" , of the message type of *Float32*
  - Sends a constant value of 11.5 with a rate of 10 Hz

* TASK (50 points): Creating a subscriber yourself
In an actual robot, you would publish your velocity command to a similar topic.
Then, somewhere else, another node has to read this topic and control the motors appropriately.
In this case, we do not have an actual robot, so we will only act as if we have one.

- In the same "robot_controller" package, create a new script called "rc_motor_controller.py"
  *Reminder:* Do not forget to make the script executable !
- In this script, implement the following subscriber:
  - Name of the node is "robot_controller_motor_controller"
  - It subscribers to the "/cmd_vel" topic
  - In the callback function, it computes a left and right wheel velocity and prints that using "rospy.loginfo"
    That is:
#+BEGIN_SRC python
# inside the callback function
V_left = message.data + 10
V_right = message.data - 10
rospy.loginfo("Left = %f  , Right = %f", V_left , V_right)
#+END_SRC




























